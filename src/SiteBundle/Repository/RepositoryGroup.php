<?php

namespace Mkk\SiteBundle\Repository;

use Doctrine\ORM\Query;
use Mkk\SiteBundle\Lib\LibTranslatableRepository;

/**
 * HoraireRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RepositoryGroup extends LibTranslatableRepository
{
    /**
     * Backend.
     *
     * @param mixed $data data
     *
     * @return array
     */
    public function searchGroupAll($data): Query
    {
        $code   = $this->getEntityName();
        $entity = "{$this->bundle}:Group";
        $dql    = "SELECT {$code} FROM {$entity} {$code}";
        if (isset($data['lettre'])) {
            $lettre = $data['lettre'];
            $dql    = "{$dql} WHERE {$code}.nom LIKE '%{$lettre}%'";
        }

        $result = $this->setSearchResult($dql);

        return $result;
    }

    /**
     * RÃ©cupere le nombre d'utilisateur.
     *
     * @return array
     */
    public function commandTotalUser(): array
    {
        $code   = $this->getEntityName();
        $entity = "{$this->bundle}:Group";
        $em     = $this->getEntityManager();
        $sql    = "SELECT {$code}.id, count({$code}.id) as total FROM {$entity} {$code}";
        $sql    = "{$sql}  LEFT JOIN {$code}.users users";
        $sql    = "{$sql}  GROUP BY {$code}.id";
        $query  = $em->createQuery($sql);
        $data   = $query->getResult();

        return $data;
    }

    /**
     * requete pour la liste d'admin.
     *
     * @return Query
     */
    public function searchAdminList(): Query
    {
        $code   = $this->getEntityName();
        $entity = "{$this->bundle}:Group";
        $dql    = "SELECT {$code} FROM {$entity} {$code}";
        $query  = $this->getQuery($dql);

        return $query;
    }

    /**
     * Donne la liste des groupes qui sont des contacts.
     *
     * @param array $data data
     *
     * @return Query
     */
    public function searchGroupContact($data): Query
    {
        $code   = $this->getEntityName();
        $entity = "{$this->bundle}:Group";
        $dql    = "SELECT {$code} FROM {$entity} {$code}";
        $search = [];
        if (isset($data['lettre'])) {
            $lettre   = $data['lettre'];
            $search[] = "{$code}.nom LIKE '%{$lettre}%'";
        }

        if (isset($data['params_config']['group_contacts'])) {
            $tabgroups = $data['params_config']['group_contacts'];
            if (is_array($tabgroups) && count($tabgroups) >= 1) {
                $tabgroups = implode("', '", $tabgroups);
                $search[]  = "{$code}.id IN('{$$tabgroups}')";
            }
        }

        $dql    = $this->searchImplode($search, $dql);
        $dql    = trim($dql);
        $dql    = "{$dql} ORDER BY {$code}.nom ASC";
        $result = $this->setSearchResult($dql);

        return $result;
    }

    /**
     * Donne la liste des groupes qui peuvent se connecter.
     *
     * @param array $data data
     *
     * @return Query
     */
    public function searchGroupConnect($data): Query
    {
        $code   = $this->getEntityName();
        $entity = "{$this->bundle}:Group";
        $dql    = "SELECT {$code} FROM {$entity} {$code}";
        $search = [];
        if (isset($data['lettre'])) {
            $lettre   = $data['lettre'];
            $search[] = "{$code}.nom LIKE '%{$lettre}%'";
        }

        if (isset($data['params_config']['group_connect'])) {
            $tabgroups = $data['params_config']['group_connect'];
            if (is_array($tabgroups) && count($tabgroups) >= 1) {
                $tabgroups = implode("','", $tabgroups);
                $search[]  = "{$code}.id IN ('{$tabgroups}')";
            }
        }

        $dql    = $this->searchImplode($search, $dql);
        $dql    = trim($dql);
        $dql    = "{$dql} ORDER BY {$code}.nom ASC";
        $result = $this->setSearchResult($dql);

        return $result;
    }
}
