<?php

namespace Mkk\SiteBundle\Repository;

use Doctrine\ORM\Query;
use Mkk\SiteBundle\Lib\LibTranslatableRepository;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RepositoryUser extends LibTranslatableRepository implements UserLoaderInterface
{
    /**
     * Requete pour le login.
     *
     * @param string $username pseudo ou email
     *
     * @return mixed
     */
    public function loadUserByUsername($username)
    {
        $param = [
            'username' => $username,
            'email'    => $username,
        ];

        $table  = $this->getEntityName();
        $dql    = "SELECT u FROM {$table}:User WHERE u.username=:username OR u.email=:email";
        $query  = $this->getQuery($dql, $param);
        $result = $query->getOneOrNullResult();

        return $result;
    }

    /**
     * Backend
     * Liste des catégories de blogs pour le formulaire partenaire.
     *
     * @param mixed $data data
     *
     * @return array
     */
    public function searchUserConnect($data)
    {
        $entity = $this->getEntityName();
        $dql    = "SELECT {$entity} FROM {$this->bundle}:User {$entity} LEFT JOIN {$entity}.refgroup g";
        $param  = [];
        $search = [];
        if (isset($data['params_config']['group_connect'])) {
            $tabgroups = $data['params_config']['group_connect'];
            if (is_array($tabgroups) && count($tabgroups) >= 1) {
                $tabgroups = implode("','", $tabgroups);
                $search[]  = "g.id IN ('{$tabgroups}')";
            }
        }

        if (isset($data['lettre'])) {
            $lettre   = $data['lettre'];
            $search[] = "({$entity}.nom LIKE '%{$lettre}%' OR {$entity}.prenom LIKE '%{$lettre}%')";
        }

        $dql    = $this->searchImplode($search, $dql);
        $dql    = trim($dql) . " ORDER BY {$entity}.nom ASC";
        $result = $this->setSearchResult($dql, $param);

        return $result;
    }

    /**
     * requete pour la liste d'admin.
     *
     * @param array $data data
     *
     * @return mixed|Query
     */
    public function searchAdminList(array $data = [])
    {
        $entity = $this->getEntityName();
        $search = [];
        $dql    = "SELECT {$entity} FROM {$this->bundle}:User {$entity} LEFT JOIN {$entity}.refgroup grp";
        if (!isset($data['type'])) {
            return [];
        }

        $type      = $data['type'];
        $datagroup = [];
        if ('contact' === $type) {
            if (!isset($data['params_config']['group_contacts'])) {
                $result = [];

                return $result;
            }

            $datagroup = $data['params_config']['group_contacts'];
        } elseif ('user' === $type) {
            if (!isset($data['params_config']['group_utilisateurs'])) {
                $result = [];

                return $result;
            }

            $datagroup = $data['params_config']['group_utilisateurs'];
        }

        if (0 === count($datagroup)) {
            $result = [];

            return $result;
        }

        $tabgroup = implode("','", $datagroup);
        $search[] = "grp.id IN ('{$tabgroup}')";
        $dql      = $this->searchImplode($search, $dql);
        $query    = $this->getQuery($dql);

        return $query;
    }

    /**
     * Return le nombre de données.
     *
     * @return array
     */
    public function totalWidgetList(): array
    {
        $entity = $this->getEntityName();
        $dql    = "SELECT COUNT({$entity}) AS total FROM {$this->bundle}:User {$entity}";
        $query  = $this->getQuery($dql);
        $result = $query->getArrayResult();

        return $result;
    }

    /**
     * Return les 5 derniers résultats.
     *
     * @return array
     */
    public function searchWidgetList(): array
    {
        $entity = $this->getEntityName();
        $dql    = "SELECT {$entity}.id,CONCAT({$entity}.nom,' ',{$entity}.prenom) AS libelle";
        $dql    = "{$dql} FROM {$this->bundle}:User {$entity} ORDER BY {$entity}.id desc";
        $query  = $this->getQuery($dql);
        $query->setMaxResults(5);
        $result = $query->getResult();

        return $result;
    }
}
